Analytic functions are like Syntactic Sugars
Lets take an example of SALES_DATA DATA in a RETAIL WORLD which looks something like this


CREATE TABLE Sales_Data
(OrderID INT,
StoreID INT,
ProductID INT,
OrderDate DATE,
Revenue DECIMAL(10,2));

insert into Sales_Data
values
(1,2,2,'2016-01-17',1299.45),
(2,1,1,'2016-01-17',2342.33),
(3,1,2,'2016-01-17',4543.98),
(4,2,4,'2016-01-17',5102.05),
(5,1,4,'2016-01-17',5673.01),
(6,1,3,'2016-01-17',6345.1),
(7,2,1,'2016-01-17',8902.65),
(8,2,3,'2016-01-17',9114.67),
(9,2,2,'2016-01-18',1621.58),
(10,1,2,'2016-01-18',2433.76),
(11,2,3,'2016-01-18',3644.33),
(12,1,4,'2016-01-18',5316.89),
(13,1,3,'2016-01-18',7455.67),
(14,1,1,'2016-01-18',8236.33),
(15,2,4,'2016-01-18',8988.64),
(16,2,1,'2016-01-18',9456.01);

--Examples of windowing query to get RUNNING TOTAL, RUNNING TOTAL PARTITION BY ORDER_DATE
And at last getting revenute and average revenue

from Sales_Data
select  OrderID,storeID,ProductID,OrderDate,Revenue,
sum(Revenue)over(order by OrderID rows between UNBOUNDED PRECEDING and current row) 
as Running_Total;

from Sales_Data
select  OrderID,storeID,ProductID,OrderDate,Revenue,
sum(Revenue)over(partition by OrderDate order by OrderID) 
as Running_Total;

from Sales_Data
select  OrderID,storeID,ProductID,OrderDate,Revenue,
avg(Revenue)over(partition by OrderDate order by OrderID 
rows between 3 PRECEDING and current row ) 
as Running_Total;

--Percentage Revenue Day Level
from Sales_Data
select  OrderID,storeID,ProductID,OrderDate,Revenue,
(Revenue) * 100 / ( sum(Revenue) over(partition by OrderDate )
rows between 3 PRECEDING and current row ) 
as Running_Total;


Some of Aggregate Functions
ROW_NUMBER() - ROW_NUMBER() OVER (PARTITION BY ORDER_DATE ORDER BY ORDER_ID). Doesn't need windowing clause
RANK -  Similar to ROW_NUMBER but returns same rank in case values are same
LEAD - 
LAG
NTITE - Create Buckets,  
-- Example of LAG
from Sales_Data
select  OrderID,storeID,ProductID,OrderDate,Revenue,
Revenue - LAG(REVENUE,1) over(partition by OrderDate order by OrderID) 
as Running_Total;

